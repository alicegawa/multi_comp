begintemplate rall1

public init, makeSyn, makeNetCon, makeSynUpDown
public soma, dend_parent, dend, axon, branchNum
public synlist, synlist_e, synlist_i


//branchNum = 10//20
create soma, dend_parent, dend[1], axon


//create soma
//create axon
// recreate in init section
//create dend_parent, dend[branchNum]
objref synlist, synlist_e, synlist_i
objref syn_, esyn, esyn_for_spon

proc init() {local i, xshift, yshift, zshift localobj syn,r
    xshift = $1
    yshift = $2
    zshift = $3
    branchNum = $4

    synlist = new List()
    synlist_e = new List()
    synlist_i = new List()
    
    create soma, axon, dend_parent, dend[branchNum]
    
    
    
    // for i=0, branchNum-1{
    // 	connect dend[i](1), dend_parent(0)
    // }
    
    
    // connect soma(0), dend_parent(1)
    // connect axon(0), soma(1)
    
    
    axon {
	//L = 500
	diam = 0.2
	nseg = 20
	
	pt3dclear()
	pt3dadd(0,0,0,diam)
	pt3dadd(500,0,0,diam)
	
	
	
	insert hh
    }
    
    soma {
	//L = 30	
	diam = 60//30
	nseg = 10
	cm = 1
	
	pt3dclear()
	
	pt3dadd(500+xshift,yshift,zshift,diam)
	pt3dadd(530+xshift,yshift,zshift,diam)	

	insert GPeA
	gnabar_GPeA = 0.12//0.12//0.19
	
	gkdrbar_GPeA = 0.005//0.06
	gl_GPeA = 0.0003//0.0001
	gcatbar_GPeA = 0.0001//0.005
	gkcabar_GPeA = 0.002//0.004
	ena_GPeA = 55
	ek_GPeA = -70		
	el_GPeA = -50//-54.3
	eca_GPeA = 124
    }
    connect soma(0), axon(1)
    
    dend_parent {
	//L = 50
	diam = 30//15//9.2//15//4.64//19//15//4.64//28//15
	nseg = 10
	
	pt3dclear()
	pt3dadd(530+xshift,yshift,zshift,diam)
	pt3dadd(580+xshift,yshift,zshift,diam)
	


	// insert hh
	// gnabar_hh = 0.006
	// gkbar_hh = 0


	insert pas
	g_pas = 0.0001666//0.0001666
	e_pas = -60.0
    }
    connect dend_parent(0), soma(1)
    
    for i=0, branchNum-1 dend[i] {
	//L = 400
	diam =6.46//3.23//2// 2//3.23//1//4//2.03//1//6//2.03
	nseg = 160//10
	pt3dclear()
	
	pt3dadd(580+xshift,yshift,zshift,diam)
	pt3dadd(846.4+xshift,yshift+400*0.5*cos(i*2*3.1415/branchNum),zshift+400*0.5*sin(i*2*3.1415/branchNum),diam)

	// insert hh
	// gnabar_hh = 0.006
	// gkbar_hh = 0

	insert pas
	g_pas = 0.0001666//0.0001666
	e_pas = -60.0
    }
    
    for i=0, branchNum-1{
	connect dend[i](0), dend_parent(1)
    }
/*
    for i=0, branchNum-1{
    	connect dend[i](1), dend_parent(0)
    }
    
    
    connect soma(0), dend_parent(1)
    connect axon(0), soma(1)
*/
    
    soma { 
	esyn = new Exp2Syn(0.5)
	synlist.append(esyn)
	esyn_for_spon = new Exp2Syn(0.5)
	synlist.append(esyn_for_spon)
    }
}

// these might not be used before.
obfunc connectNearCells() { localobj nc
    axon nc = new NetCon(&v(0.5), $o1)
    nc.threshold = 10
    if(numarg()==2){ $o2 = nc}
    return nc
}
obfunc connectFarCells() { localobj nc
    axon nc = new NetCon(&v(1), $o1)
    nc.threshold = 10
    if(numarg()==2){ $o2 = nc}
    return nc
}

obfunc makeSyn() {local targetno, hostno, num_ecell, num_vta, rw_flag, start_i, end_i, which_dend, where_dend
    targetno = $1
    hostno = $2
    num_ecell = $3
    num_vta = $4
    rw_flag = $5
    start_i = $6
    end_i = $7
    //which_dend should be the index of "for" section i.e. i
    which_dend = $8
    //position of synaptic connnection: read from prepared files
    where_dend = $9

    if(hostno<num_ecell){
	dend[which_dend] {
	    //really here is STDP
	    //syn_ = new Exp2Syn(where_dend)
	    syn_ = new ExpSynSTDP(where_dend)
	    synlist_e.append(syn_)
	}
	if(rw_flag){
	    if(targetno<num_vta || (targetno >= start_i && targetno<end_i)){
		syn_.forSpike = 2
	    }
	}
    }else{
	dend[which_dend] {
	    syn_ = new Exp2Syn(where_dend)
	    //syn_ = new ExpSynSTDP(where_dend)
	    synlist_i.append(syn_)
	    syn_.e = -45//-45
	}
    }
    return syn_
}

obfunc makeSynUpDown(){local targetno, hostno, num_ecell, num_vta, rw_flag, start_i, end_i
    targetno = $1
    hostno = $2
    num_ecell = $3
    num_vta = $4
    rw_flag = $5
    start_i = $6
    end_i = $7
    if(hostno<num_ecell){
        soma {
            syn_ = new ExpSynSTDP(0.5)
            synlist_e.append(syn_)
        }
    }else{
        soma {
            syn_ = new Exp2Syn(0.5)
            synlist_i.append(syn_)
        }
    }
    return syn_
}


endtemplate rall1